name: Continuous Integration
on:
  # branches, branches-ignore, tags, tags-ignoreが有名
  # 例: realeases/** '!releases/**-testing'だとreleasesで反応するけど、-testingが除外
  # paths:もある。paths: '*.js'などの指定
  - push
  - pull_request

  # typeによる絞り込み
  # - issue_comment:
  #   types: [created, edited] # deletedもあるけどその時は動作させない

# 全てのステップにデフォルトで適用される設定を定義可能, ジョブレベルも可能。
# shell, working-directoryを指定するっぽい
# defaults:

# envで指定。ジョブレベル, ステップレベルもOK
# より限定的なスコープのenvが優先される
# CI, HOME, GITHUB_ などは取り扱い注意
env:
  TEST_ARG: test-arg-value

# 秘密情報
# GITHUB, secretsに登録する
# CONSTケースで入れるのが通例
# secrets.<TOKEN名>
# 基本的にはforkされたリポジトリに秘密情報は渡されない
# GITHUB_TOKENはreadのみ渡されるので注意

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    # outputsセクションを書かないと、クロスjobでの参照ができない
    outputs:
      result: ${{ steps.set-output-test.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Restore node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: set-env-test
        # set-envはdepreciate
        # run: echo "::set-env name=TZ::Asia/Tokyo"
        run: echo "TZ=Asia/Tokyo" >> $GITHUB_ENV
      - name: print-env-test
        run: echo 'The selected color is' $TZ
      - name: set-output-test
        id: set-output-test
        run: echo "::set-output name=result::true"
      - name: print-output-test
        run: echo ${{ steps.set-output-test.outputs.result }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      - name: Install dependency
        run: yarn install --frozen-lockfile
      - name: Lint
        run: yarn lint
  unit-test:
    # ここがブラウザ上で表示される
    name: Unit Test
    runs-on: ubuntu-latest
    # 依存関係
    # deplog: needs: [lint, test]なら両方成功して初めて実行する
    needs:
      - lint
    steps:
      - name: Checkout
        # 使用するアクションについて
        uses: actions/checkout@v3
      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        # actionsに渡す引数。actions側ではINOUT_<変数名の大文字>で参照される。例: INPUT_NODE-VERSION
        # entrypoint, argsなどでDockerfileへ渡すこともできる 詳しくはdocket-test.yml
        with:
          node-version: 16.x
      - name: Restore node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          # ここに完全一致するkeyがある場合はpathで指定したfile-pathに復元される
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependency
        run: yarn install --frozen-lockfile
      - name: print-output-from-another-job
        run: echo ${{ needs.lint.outputs.result }}
      - name: Test
        run: yarn test
        # timeoutを指定, ステップレベル, ジョブレベルで指定可能
        # デフォルトは360分
        timeout-minutes: 10
        # trueにすると落ちてもCIが動くようになる
        continue-on-error: false
      - name: Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          # アーティファクト名。デフォルトはartifact
          name: test-coverage
          # アップロードされるディレクトリ
          path: coverage
  command-playground:
    name: Command Plaayground
    runs-on: ubuntu-latest
    steps:
      - run: pwd
      - run: pwd
        # コマンド実行時のディレクトリが指定できる
        working-directory: /tmp
      - run: ls
        working-directory: /tmp
      - run: pwd
      - run: cd /tmp
      # 別プロセスなのでcdしたとて、次のコマンドでは移動していない
      - run: pwd
  job1:
    name: Output Send
    runs-on: ubuntu-latest
    outputs:
      random: ${{ steps.generate-random.outputs.random }}
    steps:
      - id: generate-random
        run: echo "::set-output name=random::$(openssl rand -base64 12)"

  job2:
    name: Output Receive
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - run: echo "${{ needs.job1.outputs.random }}"

  matrix-test:
    name: Matrix Unit Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gender: [female, male, non-binary]
        grade: [junior, professional]
        # 組み合わせ次第で、さらに条件を追加
        include:
          - gender: male
            grade: junior
            ritual: wedding-ceremoney
        # 除外パターン
        exclude:
          - gender: non-binary
            grade: junior
      # 失敗時の挙動
      fail-fast: true
      max-parallel: 2
    steps:
      - name: echo matrix
        run: echo ${{ matrix.gender }}-${{ matrix.grade }}-${{ matrix.ritual }}
  job-if-master:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Master!!!!"
  job-if-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Develop!!!!"
  job-functions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ toJson(github) }}"
      - run: echo "${{ fromJSON('{"greeting":"Hello, World!"}').greeting }}"
  upload:
    runs-on: ubuntu-latest
    steps:
      - run: mkdir data && echo "Hello" > data/hello.txt
      - uses: actions/upload-artifact@v2
        with:
          name: data
          path: data
  download:
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - uses: actions/upload-artifact@v2
        with:
          name: data
      - run: cat hello.txt
